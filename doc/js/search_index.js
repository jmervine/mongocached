var search_data = {"index":{"searchIndex":["mongocached","notfound","add()","cache()","clean()","clean_expired()","defaults()","delete()","flush()","flush_expired()","flush_expired!()","get()","load()","new()","remove()","replace()","save()","set()"],"longSearchIndex":["mongocached","mongocached::notfound","mongocached#add()","mongocached#cache()","mongocached#clean()","mongocached#clean_expired()","mongocached#defaults()","mongocached#delete()","mongocached#flush()","mongocached#flush_expired()","mongocached#flush_expired!()","mongocached#get()","mongocached#load()","mongocached::new()","mongocached#remove()","mongocached#replace()","mongocached#save()","mongocached#set()"],"info":[["Mongocached","","Mongocached.html","","<p>@author Joshua P. Mervine &lt;joshua@mervine.net&gt;\n"],["Mongocached::NotFound","","Mongocached/NotFound.html","",""],["add","Mongocached","Mongocached.html#method-i-add","(id, data, tags = [], ttl = @options[:lifetime])","<p>add cache\n<p>creates cache if it doesn't exist\n<p>return false if it does\n"],["cache","Mongocached","Mongocached.html#method-i-cache","(id, tags = [], ttl = @options[:lifetime])",""],["clean","Mongocached","Mongocached.html#method-i-clean","()",""],["clean_expired","Mongocached","Mongocached.html#method-i-clean_expired","()",""],["defaults","Mongocached","Mongocached.html#method-i-defaults","()",""],["delete","Mongocached","Mongocached.html#method-i-delete","(id)","<p>expire cache\n"],["flush","Mongocached","Mongocached.html#method-i-flush","()","<p>delete all caches\n"],["flush_expired","Mongocached","Mongocached.html#method-i-flush_expired","()","<p>flush expired caches if cleanup hasn't been run recently\n"],["flush_expired!","Mongocached","Mongocached.html#method-i-flush_expired-21","()","<p>flush expired caches, ingoring when garbage collection was last run update\nindexes\n"],["get","Mongocached","Mongocached.html#method-i-get","(id)","<p>get cache\n<p>reads cache if it exists and isn't expired or raises Diskcache::NotFound\n<p>if passed an Array returns ...\n"],["load","Mongocached","Mongocached.html#method-i-load","(id)",""],["new","Mongocached","Mongocached.html#method-c-new","(options={})","<p>initialize object\n"],["remove","Mongocached","Mongocached.html#method-i-remove","(id)",""],["replace","Mongocached","Mongocached.html#method-i-replace","(id, data, tags = [], ttl = @options[:lifetime])",""],["save","Mongocached","Mongocached.html#method-i-save","(id, tags = [], ttl = @options[:lifetime])","<p>create or read cache\n<p>creates cache if it doesn't exist\n<p>reads cache if it exists\n"],["set","Mongocached","Mongocached.html#method-i-set","(id, data, tags = [], ttl = @options[:lifetime])","<p>set cache\n<p>creates cache if it doesn't exist\n<p>updates cache if it does exist\n"]]}}